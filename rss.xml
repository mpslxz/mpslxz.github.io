<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Yours Geekly</title><link>http://mpslxz.github.io/</link><description>A place to talk about machine learning, tech, computers, editors and etc.</description><atom:link href="http://mpslxz.github.io/rss.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><copyright>Contents Â© 2018 &lt;a href="mailto:"""&gt;mpslxz&lt;/a&gt; </copyright><lastBuildDate>Thu, 08 Feb 2018 23:06:34 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Tramp: A great tool for remote code development.</title><link>http://mpslxz.github.io/posts/tramp/</link><dc:creator>mpslxz</dc:creator><description>&lt;p&gt;
GNU Emacs is an awesome editor which has been around for quite some time. The flexible nature of it and its extendibility has turned Emacs into one of the best text editors which you can do pretty much anything in it including listening to music, checking email, surfing web, playing tetris and so on (I am not gonna go into &lt;a href="https://en.wikipedia.org/wiki/Editor_war"&gt;Emacs vs. Vim&lt;/a&gt;  debates at least for now). One of the most useful Emacs packages is &lt;a href="https://www.gnu.org/software/tramp/"&gt;Tramp&lt;/a&gt;. Tramp simply brings ssh to Emacs and allows you to load a buffer over ssh, which is wonderful for remote editing.
Consider this scenario, which is very likely to happen to a lot of us: you have a powerful machine somewhere which you have remote access to. You need to write some code or implement an algorithm which needs a lot of computation power or a specific hardware (BAZINGA! GPU). Obviously, there are one hundred and one different ways to do it. You can use a cloud file sharing, online repository management system (github etc.) or if you wanna be geeky, ssh to the remote machine and fire up an editor on it. All of these are fine but if you are used to your editor and you have configed it to your fitting, it becomes tedious to work on another system. So in this case, Tramp saves your day with a ton of awesomeness (if you use emacs). One of the nice things about Tramp is that it can do multihop ssh as well. So if you have defined a gateway via &lt;a href="http://undeadly.org/cgi?action=article&amp;amp;sid=20070925181947"&gt;ProxyCommand&lt;/a&gt;, Tramp still will be able to use it out-of-the-box. 
Another cool feature of Tramp is that you can integrate it with other emacs packages. So technically, you can start X11 applications remotely and forward the display to your local machine (hopefully, I will write another post about it sometime later). Or, load jpg images in a local buffer from the remote computer.
&lt;/p&gt;

&lt;p&gt;
To use Tramp all you do is:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;open the find file &lt;b&gt;(C-c C-f)&lt;/b&gt;,
&lt;/li&gt;
&lt;li&gt;go all the way back to the root folder
&lt;/li&gt;
&lt;li&gt;type &lt;b&gt;ssh:&lt;/b&gt;
&lt;/li&gt;
&lt;li&gt;immediately, you are gonna see all of the hosts that you have connected to before.
&lt;/li&gt;
&lt;li&gt;go ahead and select the one that you want to connect to 
&lt;/li&gt;
&lt;li&gt;enter your password
&lt;/li&gt;
&lt;li&gt;viola! a dired buffer opens at the home folder, just as normal ssh over terminal (you can also load any desired directory when "ssh"ing)
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
I highly recommend going over the &lt;a href="https://www.gnu.org/software/tramp/"&gt;manual&lt;/a&gt; to learn the ins and outs of this awesome tool.
&lt;/p&gt;</description><category>emacs</category><category>remote editing</category><category>tramp</category><guid>http://mpslxz.github.io/posts/tramp/</guid><pubDate>Wed, 13 Sep 2017 05:20:00 GMT</pubDate></item><item><title>Links to download and install Anaconda and OpenCV</title><link>http://mpslxz.github.io/posts/computer-vision-workshop-at-ubc/</link><dc:creator>mpslxz</dc:creator><description>&lt;p&gt;
Hi Everyone,
&lt;/p&gt;

&lt;p&gt;
Firstly, I want to say thank you guys for registering for the CV workshop. This is going to be an introductory workshop to opencv, which is one of the most popular libraries for computer vision and image processing. Although opencv has different interfaces for different languages, we will use python throughout the workshop. The reason that I chose python is: 
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;at this point you've had a couple of python programming courses/workshops so you are fairly familiar with python, 
&lt;/li&gt;
&lt;li&gt;python is intuitive and easy to use, 
&lt;/li&gt;
&lt;li&gt;we will jupyter notebooks along with the normal python files (.py) to test and see immediate results. As you know, the notebooks provide an interactive environment, which is a plus.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
The software packages that we are going to use are:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;Anaconda for python 2.7, to have necessary python packages installed
&lt;/li&gt;
&lt;li&gt;OpenCV 3
&lt;/li&gt;
&lt;li&gt;Your editor/IDE of choice like PyCharm. Personally, I use Emacs but it does not mean that you need to use it as well.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
I am going to put all of the download links and also installation documents in this post. Just please make sure that you download and install Anaconda for python 2.7 and opencv3.
&lt;/p&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;PyCharm&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
If you want to use PyCharm as your IDE, you can find the download it and find the instructions &lt;a href="https://www.jetbrains.com/pycharm/download/"&gt;here&lt;/a&gt;. 
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Tip: You can register as a student and get the professional version of PyCharm for free.&lt;/b&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Anadonda for Windows:&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://repo.continuum.io/archive/Anaconda2-5.0.1-Windows-x86_64.exe"&gt;Download from here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.anaconda.com/anaconda/install/windows"&gt;How to install&lt;/a&gt; 
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;b&gt;NOTE:&lt;/b&gt; Remember where you install Anaconda. You are going to need it when installing OpenCV. Let's call it &lt;code&gt;ANACONDA_FOLDER&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;NOTE:&lt;/b&gt; Check the box where it says "Add Anaconda to my PATH variable". If you have already installed a python version, this will replace it with the current Anacanda version.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;Anaconda for GNU/Linux:&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://repo.continuum.io/archive/Anaconda2-5.0.1-Linux-x86_64.sh"&gt;Download from here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.anaconda.com/anaconda/install/linux"&gt;How to install&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;Anaconda for MacOS:&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://repo.continuum.io/archive/Anaconda2-5.0.1-MacOSX-x86_64.sh"&gt;Download from here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.anaconda.com/anaconda/install/mac-os"&gt;How to install&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-5" class="outline-2"&gt;
&lt;h2 id="sec-5"&gt;OpenCV3:&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-5-1" class="outline-3"&gt;
&lt;h3 id="sec-5-1"&gt;For Windows&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-5-1"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;Go to &lt;a href="https://opencv.org/releases.html"&gt;the opencv download page&lt;/a&gt; and download version 3.1.0 for Windows. 
&lt;/li&gt;
&lt;li&gt;Click and extract the downloaded file.
&lt;/li&gt;
&lt;li&gt;Go to &lt;code&gt;opencv\build\python\2.7&lt;/code&gt; folder.
&lt;/li&gt;
&lt;li&gt;Copy &lt;code&gt;cv2.pyd&lt;/code&gt; to &lt;code&gt;ANACONDA_FOLDER\lib\site_packages&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;Done!
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-5-2" class="outline-3"&gt;
&lt;h3 id="sec-5-2"&gt;For GNU/Linux and MacOS:&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-5-2"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;Open a terminal window.
&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;conda install -c menpo opencv3&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Done!
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
That's it for now. See you at the workshop. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>computer vision</category><category>opencv</category><category>python</category><guid>http://mpslxz.github.io/posts/computer-vision-workshop-at-ubc/</guid><pubDate>Thu, 07 Sep 2017 04:50:53 GMT</pubDate></item><item><title>Which keyboard layout is the best for you?</title><link>http://mpslxz.github.io/posts/which-keyboard-layout-is-the-best-for-you/</link><dc:creator>mpslxz</dc:creator><description>&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://mpslxz.github.io/images/keyboard.jpg" alt="keyboard.jpg"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Keyboards and their layouts are definitely one of the pieces of computer hardware that have a lot of controversy around them. Some people swear by the Cherry MX mechanical switches while some others think that clone switches work just as fine and there is no reason to go for the genuine ones. I'll just skip the debate about the switch types (reds vs. blues vs. clears vs. greens vs. etc.). In addition to the type of the switch, keyboards have different layouts with their die-hard fans. People even have argued how using the traditional QWERTY layout causes carpel tunnel syndrome and other injeries. On the other hand learning to use a new layout, especially if you were trained with QWERTY and type extensively, has a very steep learning curve and a lot of people would just give up. Because they feel what they gain in return is not worth crushing their productivity. 
&lt;/p&gt;

&lt;p&gt;
I spend 90% of my time behind a computer (and sometimes the remaining 10% behind a laptop!) and despite being careful with my posture, at some point I realized that I feel pain radiating from my wrist to my arm. So I started doing some research about what are the probable causes of that pain and how to stop it. Of course the first solution (after ergonimics) that I came across with, was "Use another layout". So I made the big decision and started to use dvorak and I am not gonna lie; I liked it and I still do, although obviously productivity plummeted at the beginning. However, I was always curious that how much of a "real" difference it would make for "me" because of the type of the work that I do. 
&lt;/p&gt;

&lt;p&gt;
So, I wrote some code to visualize my key stroke map on the actual layout based on my files on git and I'd like to share the results with you folks.
I looked at the maps separately for C++, Python and Tex files and the results are very interesting:
&lt;/p&gt;
&lt;div id="outline-container-sec-0-0-1" class="outline-4"&gt;
&lt;h4 id="sec-0-0-1"&gt;C++&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-0-0-1"&gt;
&lt;/div&gt;&lt;ul class="org-ul"&gt;&lt;li&gt;&lt;a id="sec-0-0-1-1" name="sec-0-0-1-1"&gt;&lt;/a&gt;QWERTY:&lt;br&gt;&lt;div class="outline-text-5" id="text-0-0-1-1"&gt;

&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://mpslxz.github.io/images/layout_maps/qwerty_cpp.png" alt="qwerty_cpp.png"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="sec-0-0-1-2" name="sec-0-0-1-2"&gt;&lt;/a&gt;Dvorak:&lt;br&gt;&lt;div class="outline-text-5" id="text-0-0-1-2"&gt;

&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://mpslxz.github.io/images/layout_maps/dvorak_cpp.png" alt="dvorak_cpp.png"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="sec-0-0-1-3" name="sec-0-0-1-3"&gt;&lt;/a&gt;Colemac:&lt;br&gt;&lt;div class="outline-text-5" id="text-0-0-1-3"&gt;

&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://mpslxz.github.io/images/layout_maps/colemac_cpp.png" alt="colemac_cpp.png"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="sec-0-0-1-4" name="sec-0-0-1-4"&gt;&lt;/a&gt;Workman:&lt;br&gt;&lt;div class="outline-text-5" id="text-0-0-1-4"&gt;

&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://mpslxz.github.io/images/layout_maps/workman_cpp.png" alt="workman_cpp.png"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-0-0-2" class="outline-4"&gt;
&lt;h4 id="sec-0-0-2"&gt;Python&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-0-0-2"&gt;
&lt;/div&gt;&lt;ul class="org-ul"&gt;&lt;li&gt;&lt;a id="sec-0-0-2-1" name="sec-0-0-2-1"&gt;&lt;/a&gt;QWERTY:&lt;br&gt;&lt;div class="outline-text-5" id="text-0-0-2-1"&gt;

&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://mpslxz.github.io/images/layout_maps/qwerty_py.png" alt="qwerty_py.png"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="sec-0-0-2-2" name="sec-0-0-2-2"&gt;&lt;/a&gt;Dvorak:&lt;br&gt;&lt;div class="outline-text-5" id="text-0-0-2-2"&gt;

&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://mpslxz.github.io/images/layout_maps/dvorak_py.png" alt="dvorak_py.png"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="sec-0-0-2-3" name="sec-0-0-2-3"&gt;&lt;/a&gt;Colemac:&lt;br&gt;&lt;div class="outline-text-5" id="text-0-0-2-3"&gt;

&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://mpslxz.github.io/images/layout_maps/colemac_py.png" alt="colemac_py.png"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="sec-0-0-2-4" name="sec-0-0-2-4"&gt;&lt;/a&gt;Workman:&lt;br&gt;&lt;div class="outline-text-5" id="text-0-0-2-4"&gt;

&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://mpslxz.github.io/images/layout_maps/workman_py.png" alt="workman_py.png"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-0-0-3" class="outline-4"&gt;
&lt;h4 id="sec-0-0-3"&gt;Tex&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-0-0-3"&gt;
&lt;/div&gt;&lt;ul class="org-ul"&gt;&lt;li&gt;&lt;a id="sec-0-0-3-1" name="sec-0-0-3-1"&gt;&lt;/a&gt;QWERTY:&lt;br&gt;&lt;div class="outline-text-5" id="text-0-0-3-1"&gt;

&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://mpslxz.github.io/images/layout_maps/qwerty_tex.png" alt="qwerty_tex.png"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="sec-0-0-3-2" name="sec-0-0-3-2"&gt;&lt;/a&gt;Dvorak:&lt;br&gt;&lt;div class="outline-text-5" id="text-0-0-3-2"&gt;

&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://mpslxz.github.io/images/layout_maps/dvorak_tex.png" alt="dvorak_tex.png"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="sec-0-0-3-3" name="sec-0-0-3-3"&gt;&lt;/a&gt;Colemac:&lt;br&gt;&lt;div class="outline-text-5" id="text-0-0-3-3"&gt;

&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://mpslxz.github.io/images/layout_maps/colemac_tex.png" alt="colemac_tex.png"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="sec-0-0-3-4" name="sec-0-0-3-4"&gt;&lt;/a&gt;Workman:&lt;br&gt;&lt;div class="outline-text-5" id="text-0-0-3-4"&gt;

&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://mpslxz.github.io/images/layout_maps/workman_tex.png" alt="workman_tex.png"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Thoughts:&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Looking at C++ maps, the right hand will have a lot of trouble with mainly Workman layout, since basically all the rows are used. Colemac is a little bit better but still not good. To me, Dvorak seems to win because of high stroke rate of the home row and also because of the fact that "-" is placed at the home row.
&lt;/li&gt;
&lt;li&gt;For Python, Workman and QWERTY look almost in the same ball park. I feel Dvorak is superior again.
&lt;/li&gt;
&lt;li&gt;For Tex, Colemac seems to be the way to go. I would imagine that I can live with Workman too. Next is definitely Dvorak and QWERTY looks to be the last option.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Conclusion:&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;It is absolutely impractical to use different layouts for different languages. So for me, Dvorak looks to be the best option between them.
&lt;/li&gt;
&lt;li&gt;I believe Dvorak has the steepest learning curve becuse almost all of the keys are replaced, which is another thing to consider.
&lt;/li&gt;
&lt;li&gt;I use my keyboard for even navigating web plus all the crazy emacs key strokes. So it would be interesting if I log all of my presses and then see the difference.
&lt;/li&gt;
&lt;li&gt;C++ is REALLY bad for my health, no matter what layout I choose, so I'll try to avoid it as much as possible.
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
You can find the code &lt;a href="https://github.com/mpslxz/which_layout"&gt;here&lt;/a&gt; and see which layout hypothetically works better for you.
&lt;/p&gt;

&lt;p&gt;
Let me know what you guys think. Would you switch to a new layout? Is it really worth the time, energy and frustrations?
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>http://mpslxz.github.io/posts/which-keyboard-layout-is-the-best-for-you/</guid><pubDate>Thu, 08 Jun 2017 07:43:10 GMT</pubDate></item></channel></rss>